// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ClientMessage struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientMessage) Reset()         { *m = ClientMessage{} }
func (m *ClientMessage) String() string { return proto.CompactTextString(m) }
func (*ClientMessage) ProtoMessage()    {}
func (*ClientMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}

func (m *ClientMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientMessage.Unmarshal(m, b)
}
func (m *ClientMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientMessage.Marshal(b, m, deterministic)
}
func (m *ClientMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientMessage.Merge(m, src)
}
func (m *ClientMessage) XXX_Size() int {
	return xxx_messageInfo_ClientMessage.Size(m)
}
func (m *ClientMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ClientMessage proto.InternalMessageInfo

func (m *ClientMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*ClientMessage)(nil), "proto.ClientMessage")
}

func init() {
	proto.RegisterFile("message.proto", fileDescriptor_33c57e4bae7b9afd)
}

var fileDescriptor_33c57e4bae7b9afd = []byte{
	// 123 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x4d, 0x2d, 0x2e,
	0x4e, 0x4c, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x9a, 0x5c,
	0xbc, 0xce, 0x39, 0x99, 0xa9, 0x79, 0x25, 0xbe, 0x10, 0x59, 0x21, 0x09, 0x2e, 0x76, 0xa8, 0x42,
	0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x18, 0xd7, 0xa8, 0x87, 0x91, 0x8b, 0x0f, 0xaa, 0x2a,
	0x38, 0xb5, 0xa8, 0x2c, 0x33, 0x39, 0x55, 0xc8, 0x82, 0x8b, 0x2b, 0x3d, 0x15, 0xae, 0x55, 0x04,
	0x62, 0xb4, 0x1e, 0x8a, 0x81, 0x52, 0x58, 0x45, 0x85, 0x1c, 0xb8, 0x04, 0x10, 0x3a, 0x83, 0x4b,
	0x8a, 0x52, 0x13, 0x73, 0x49, 0xd1, 0x6f, 0xc0, 0x98, 0xc4, 0x06, 0x16, 0x36, 0x06, 0x04, 0x00,
	0x00, 0xff, 0xff, 0xe0, 0x18, 0x38, 0x7c, 0xd8, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessageServiceClient interface {
	GetMessage(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (*ClientMessage, error)
	GetMessageStream(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (MessageService_GetMessageStreamClient, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) GetMessage(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (*ClientMessage, error) {
	out := new(ClientMessage)
	err := c.cc.Invoke(ctx, "/proto.MessageService/getMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetMessageStream(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (MessageService_GetMessageStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageService_serviceDesc.Streams[0], "/proto.MessageService/getMessageStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceGetMessageStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessageService_GetMessageStreamClient interface {
	Recv() (*ClientMessage, error)
	grpc.ClientStream
}

type messageServiceGetMessageStreamClient struct {
	grpc.ClientStream
}

func (x *messageServiceGetMessageStreamClient) Recv() (*ClientMessage, error) {
	m := new(ClientMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageServiceServer is the server API for MessageService service.
type MessageServiceServer interface {
	GetMessage(context.Context, *ClientMessage) (*ClientMessage, error)
	GetMessageStream(*ClientMessage, MessageService_GetMessageStreamServer) error
}

// UnimplementedMessageServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (*UnimplementedMessageServiceServer) GetMessage(ctx context.Context, req *ClientMessage) (*ClientMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (*UnimplementedMessageServiceServer) GetMessageStream(req *ClientMessage, srv MessageService_GetMessageStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMessageStream not implemented")
}

func RegisterMessageServiceServer(s *grpc.Server, srv MessageServiceServer) {
	s.RegisterService(&_MessageService_serviceDesc, srv)
}

func _MessageService_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MessageService/GetMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetMessage(ctx, req.(*ClientMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetMessageStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageServiceServer).GetMessageStream(m, &messageServiceGetMessageStreamServer{stream})
}

type MessageService_GetMessageStreamServer interface {
	Send(*ClientMessage) error
	grpc.ServerStream
}

type messageServiceGetMessageStreamServer struct {
	grpc.ServerStream
}

func (x *messageServiceGetMessageStreamServer) Send(m *ClientMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _MessageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getMessage",
			Handler:    _MessageService_GetMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getMessageStream",
			Handler:       _MessageService_GetMessageStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "message.proto",
}
